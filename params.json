{
  "name": "Tablelize",
  "tagline": "Customizable Laravel Eloquent html tables with pagination, search, sorting and buttons.",
  "body": "# Tablelize\r\n\r\nCustomizable Laravel Eloquent html tables with pagination, search, sorting and buttons.\r\n\r\n## Installation\r\n\r\n```\r\n$ composer require softerize/tablelize\r\n```\r\n\r\n```\r\n{\r\n    \"require\": {\r\n        \"softerize/tablelize\": \"^0.1.0\"\r\n    }\r\n}\r\n```\r\n\r\n## Simple execution\r\n\r\nIn your route/controller, do the following:\r\n\r\n```php\r\nRoute::get('links', function(\\Illuminate\\Http\\Request $request){\r\n    // Create the html table using your model and the request object\r\n    $tablelize = new \\Softerize\\Tablelize\\Tablelize('\\App\\Models\\Link', $request);\r\n    return view('home.index', compact('tablelize'));\r\n});\r\n```\r\n\r\nIn your view simply generate the HTML:\r\n\r\n```php\r\n@extends('layouts.app')\r\n\r\n@section('content')\r\n{!! $tablelize->generate() !!}\r\n@endsection\r\n```\r\n\r\nThis is what you get:\r\n\r\n![Simple example](http://www.softerize.com/wp-content/uploads/2016/09/example-simple.png)\r\n\r\n## Executing with more options\r\n\r\nIf you want to customize fields and add buttons you can use the following logic:\r\n\r\n```php\r\nRoute::get('links', function(\\Illuminate\\Http\\Request $request){\r\n    // You can define this array inside your model\r\n    $options = [\r\n        'fields' => [\r\n            'name',\r\n            'url',\r\n            [\r\n                'name'   => 'updated_at',\r\n                'label'  => 'Date',\r\n                'method' => 'formatDate'\r\n            ],\r\n            [\r\n                'name'   => 'name',\r\n                'label'  => 'Level',\r\n                'method' => 'displayLevel',\r\n                'escape' => false\r\n            ]\r\n        ],\r\n        'buttons' => [\r\n            [\r\n                'url'  => 'new-link',\r\n                'icon' => 'glyphicon glyphicon-plus',\r\n                'text' => 'New'\r\n            ]\r\n        ],\r\n        'rowActions' => [\r\n            [\r\n                'url'  => 'view-link',\r\n                'icon' => 'glyphicon glyphicon-search',\r\n                'text' => 'View'\r\n            ]\r\n        ]\r\n    ];\r\n\r\n    $tablelize = new \\Softerize\\Tablelize\\Tablelize('\\App\\Models\\Link', $request, $options);\r\n    return view('home.index', compact('tablelize'));\r\n});\r\n```\r\n\r\nThe view is the same as in the simple execution. In your model you can define methods to display in your table:\r\n\r\n```php\r\n    public function formatDate($field_value) {\r\n        return date('jS \\of F Y', strtotime($field_value));\r\n        // Or\r\n        // return $this->updated_at->format('jS \\of F Y');\r\n    }\r\n\r\n    public function displayLevel($field_value) {\r\n        if($field_value === 'Google') {\r\n            return '<span class=\"label label-success\">High</span>';\r\n        }\r\n        return '<span class=\"label label-danger\">Low</span>';\r\n    }\r\n```\r\n\r\nThe result of the advanced example is:\r\n\r\n![Advanced example](http://www.softerize.com/wp-content/uploads/2016/09/example-advanced.png)\r\n\r\n## Creating the instance\r\n\r\nIn order to create a new instance of the table list, you have to instantiate the class `\\Softerize\\Tablelize\\Tablelize`. The construct method takes 3 paramenters `($query, Request $request, array $options = [])`.\r\n\r\n### $query\r\n\r\nYou have 3 possibilities to use as the first parameter:\r\n\r\nUse a model instance:\r\n\r\n```php\r\n$tablelize = new \\Softerize\\Tablelize\\Tablelize(new \\App\\Models\\Link, $request, $options);\r\n```\r\n\r\nUse a query builder object:\r\n\r\n```php\r\n$query = \\App\\Models\\Link::select('name', 'url', 'updated_at')->where('created_at', '>', '2016-08-01');\r\n$tablelize = new \\Softerize\\Tablelize\\Tablelize($query, $request, $options);\r\n```\r\n\r\nSimply use a string with the model name (complete with all namespaces):\r\n\r\n```php\r\n$tablelize = new \\Softerize\\Tablelize\\Tablelize('\\App\\Models\\Link', $request, $options);\r\n```\r\n\r\n### $request\r\n\r\nThis is the request object you get from Laravel.\r\n\r\n### $options\r\n\r\n#### url\r\n\r\nDefine the base URL to be used by the search form.\r\n\r\n*Default:* current URL (`$request->path()`)\r\n\r\n```php\r\n$options = [\r\n    'url' => 'links'\r\n];\r\n```\r\n\r\n#### id\r\n\r\nIn case you have more than one table in the same page (inside tabs for example), you can use the ID to differentiate them.\r\n\r\n*Default:* current URL, with _ replacing the /\r\n\r\n```php\r\n$options = [\r\n    'id' => 'links'\r\n];\r\n```\r\n\r\n#### fields\r\n\r\nArray with fields definition. You can use methods as well for greater control over the display. Each field can be a simple string with the field name or an array with the following options:\r\n\r\n- name: field name\r\n- label: field label\r\n- method: model method to be executed - optional\r\n- escape: can be defined as false to for HTML values\r\n- search: can be defined as false to prevent searching the field\r\n\r\n*Default:* fields will be automatically fetched from the query or the model\r\n\r\n```php\r\n$options = [\r\n    'fields' => [\r\n        'name',\r\n        [\r\n            'name'   => 'updated_at',\r\n            'label'  => 'Date',\r\n            'method' => 'formatDate'\r\n        ],\r\n        [\r\n            'name'   => 'name',\r\n            'label'  => 'Level',\r\n            'method' => 'displayLevel',\r\n            'escape' => false\r\n        ]\r\n    ]\r\n];\r\n```\r\n\r\n#### queryString\r\n\r\nArray with additional query string values. Useful if you need to define which tab the list is associated with. This way when you take an action on an specific list, the queryString parameters will be sent with the request.\r\n\r\n*Default:* empty\r\n\r\n```php\r\n$options = [\r\n    'queryString' => [\r\n        'tab' => 'links'\r\n    ]\r\n];\r\n```\r\n\r\n#### sort and sortOrder\r\n\r\nDefault field for sorting and initial sort order.\r\n\r\n*Default:* first field from the list in ASC order\r\n\r\n```php\r\n$options = [\r\n    'sort' => 'name',\r\n    'sortOrder' => 'desc'\r\n];\r\n```\r\n\r\n#### buttons\r\n\r\nArray with buttons definition. Each button can be a string with the HTML or an array with the following options:\r\n\r\n- text: button text\r\n- url: button link\r\n- icon: if you want to add an icon to the button - optional\r\n- css: class to be used by the button - optional - by default all buttons will be 'btn btn-primary'\r\n- title: title attribute of the button - optional\r\n\r\n*Default:* none\r\n\r\n```php\r\n$options = [\r\n    'buttons' => [\r\n        [\r\n            'url'   => 'new-link',\r\n            'icon'  => 'glyphicon glyphicon-plus',\r\n            'text'  => 'New',\r\n            'title' => 'New link'\r\n        ],\r\n        [\r\n            'url'   => 'settings',\r\n            'icon'  => 'glyphicon glyphicon-cog',\r\n            'text'  => 'Settings',\r\n            'title' => 'Settings',\r\n            'css'   => 'btn btn-success'\r\n        ]\r\n    ]\r\n];\r\n```\r\n\r\n#### rowActions\r\n\r\nArray with buttons for each entry. Each button can be a string with the HTML or an array with the following options:\r\n\r\n- text: button text\r\n- url: button link - the idField will be added as a parameter for each entry\r\n- icon: if you want to add an icon to the button - optional\r\n- css: class to be used by the button - optional - by default all buttons will be 'btn btn-primary'\r\n- title: title attribute of the button - optional\r\n\r\n*Default:* none\r\n\r\n```php\r\n$options = [\r\n    'buttons' => [\r\n        [\r\n            'url'   => 'view-link',\r\n            'icon'  => 'glyphicon glyphicon-search',\r\n            'text'  => 'View',\r\n            'title' => 'View entry'\r\n        ],\r\n        [\r\n            'url'   => 'delete-link',\r\n            'icon'  => 'glyphicon glyphicon-remove',\r\n            'text'  => 'Delete',\r\n            'title' => 'Delete',\r\n            'css'   => 'btn btn-danger'\r\n        ]\r\n    ]\r\n];\r\n```\r\n\r\n#### noEntriesMsg\r\n\r\nIn case you want to change the message shown when there are no entries you can do that using this parameter.\r\n\r\n*Default:* 'No entries found.'\r\n\r\n```php\r\n$options = [\r\n    'noEntriesMsg' => 'Nothing here!!'\r\n];\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}